import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import pandas as pd
import time
import os
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# === WRAPPER SAVEDMODEL (copi√© de votre code) ===
class SavedModelWrapper:
    """Wrapper pour utiliser un SavedModel comme un mod√®le Keras"""
    
    def __init__(self, savedmodel_path):
        self.model = tf.saved_model.load(savedmodel_path)
        self.serving_fn = self.model.signatures['serving_default']
        
        # Analyser la signature pour comprendre les entr√©es/sorties
        self.input_key = list(self.serving_fn.structured_input_signature[1].keys())[0]
        self.output_key = list(self.serving_fn.structured_outputs.keys())[0]
    
    def predict(self, x, verbose=0):
        """M√©thode predict compatible avec Keras"""
        # Convertir l'entr√©e au bon format
        if isinstance(x, np.ndarray):
            x = tf.convert_to_tensor(x, dtype=tf.float32)
        
        # Faire la pr√©diction avec la signature
        input_dict = {self.input_key: x}
        output = self.serving_fn(**input_dict)
        
        # Extraire la sortie
        result = output[self.output_key].numpy()
        return result

# === FONCTIONS DE CHARGEMENT POUR CHAQUE TYPE ===
def load_keras_model():
    """Charge le mod√®le .keras"""
    try:
        model = tf.keras.models.load_model("skin_cancer_model.keras", compile=False)
        return model, "Keras (.keras)"
    except Exception as e:
        return None, f"Erreur .keras: {str(e)[:100]}"

def load_h5_model():
    """Charge le mod√®le .h5"""
    try:
        model = tf.keras.models.load_model("skin_cancer_model.h5", compile=False)
        return model, "H5 (.h5)"
    except Exception as e:
        return None, f"Erreur .h5: {str(e)[:100]}"

def load_savedmodel_keras():
    """Charge le SavedModel en tant que mod√®le Keras"""
    try:
        model = tf.keras.models.load_model("skin_cancer_model_savedmodel")
        return model, "SavedModel Keras"
    except Exception as e:
        return None, f"Erreur SavedModel Keras: {str(e)[:100]}"

def load_savedmodel_wrapper():
    """Charge le SavedModel avec wrapper"""
    try:
        model = SavedModelWrapper("skin_cancer_model_savedmodel")
        return model, "SavedModel Wrapper"
    except Exception as e:
        return None, f"Erreur SavedModel Wrapper: {str(e)[:100]}"

# === G√âN√âRATION DE DONN√âES DE TEST ===
def generate_test_data(num_samples=100):
    """G√©n√®re des donn√©es de test synth√©tiques"""
    np.random.seed(42)  # Pour la reproductibilit√©
    
    # G√©n√©rer des images de test (64x64x3)
    test_images = np.random.rand(num_samples, 64, 64, 3).astype(np.float32)
    
    # G√©n√©rer des labels de test (0-6 pour 7 classes)
    test_labels = np.random.randint(0, 7, num_samples)
    
    return test_images, test_labels

def load_real_test_data():
    """Essaie de charger de vraies donn√©es de test si disponibles"""
    # Vous pouvez modifier cette fonction pour charger vos vraies donn√©es
    st.info("üìÅ Recherche de donn√©es de test r√©elles...")
    
    # V√©rifier si vous avez un dossier de test
    if os.path.exists("test_data") or os.path.exists("validation_data"):
        st.info("‚úÖ Dossier de donn√©es trouv√©, mais chargement non impl√©ment√©")
        st.info("üí° Utilisation de donn√©es synth√©tiques pour la d√©mo")
    
    return generate_test_data()

# === √âVALUATION DES MOD√àLES ===
def evaluate_model(model, model_name, test_images, test_labels):
    """√âvalue un mod√®le sur les donn√©es de test"""
    try:
        st.info(f"üîÑ √âvaluation de {model_name}...")
        
        # Mesurer le temps de pr√©diction
        start_time = time.time()
        predictions = model.predict(test_images, verbose=0)
        inference_time = time.time() - start_time
        
        # Obtenir les classes pr√©dites
        predicted_classes = np.argmax(predictions, axis=1)
        
        # Calculer les m√©triques
        accuracy = accuracy_score(test_labels, predicted_classes)
        
        # Temps moyen par pr√©diction
        avg_time_per_prediction = inference_time / len(test_images) * 1000  # en ms
        
        # Confiance moyenne
        confidence_scores = np.max(predictions, axis=1)
        avg_confidence = np.mean(confidence_scores)
        
        # Nombre de param√®tres (si disponible)
        try:
            if hasattr(model, 'count_params'):
                num_params = model.count_params()
            elif hasattr(model, 'layers'):
                num_params = sum([layer.count_params() for layer in model.layers if hasattr(layer, 'count_params')])
            else:
                num_params = "N/A"
        except:
            num_params = "N/A"
        
        return {
            'Mod√®le': model_name,
            'Accuracy': f"{accuracy:.4f}",
            'Accuracy (%)': f"{accuracy*100:.2f}%",
            'Temps total (s)': f"{inference_time:.3f}",
            'Temps/pred (ms)': f"{avg_time_per_prediction:.2f}",
            'Confiance moy.': f"{avg_confidence:.4f}",
            'Nb param√®tres': num_params,
            'Status': '‚úÖ OK'
        }
        
    except Exception as e:
        return {
            'Mod√®le': model_name,
            'Accuracy': 'N/A',
            'Accuracy (%)': 'N/A',
            'Temps total (s)': 'N/A',
            'Temps/pred (ms)': 'N/A',
            'Confiance moy.': 'N/A',
            'Nb param√®tres': 'N/A',
            'Status': f'‚ùå {str(e)[:50]}'
        }

# === INTERFACE STREAMLIT ===
def main():
    st.title("üìä Comparaison des mod√®les de d√©tection de cancer de la peau")
    st.markdown("Cette application compare les performances de tous vos mod√®les disponibles.")
    
    # === Diagnostic des fichiers ===
    st.subheader("üìÅ Fichiers disponibles")
    files_to_check = [
        "skin_cancer_model.h5",
        "skin_cancer_model.keras", 
        "skin_cancer_model_savedmodel"
    ]
    
    available_models = []
    for file in files_to_check:
        if os.path.exists(file):
            if os.path.isdir(file):
                size_info = "dossier"
            else:
                size_mb = os.path.getsize(file) / (1024 * 1024)
                size_info = f"{size_mb:.1f} MB"
            st.write(f"‚úÖ {file} ({size_info})")
            available_models.append(file)
        else:
            st.write(f"‚ùå {file} non trouv√©")
    
    if not available_models:
        st.error("‚ùå Aucun mod√®le trouv√©!")
        return
    
    # === Configuration des tests ===
    st.subheader("‚öôÔ∏è Configuration des tests")
    
    col1, col2 = st.columns(2)
    with col1:
        num_samples = st.slider("Nombre d'√©chantillons de test", 10, 500, 100)
    with col2:
        use_real_data = st.checkbox("Utiliser de vraies donn√©es (si disponibles)", False)
    
    # === Bouton de lancement ===
    if st.button("üöÄ Lancer la comparaison"):
        
        # Chargement des donn√©es de test
        if use_real_data:
            test_images, test_labels = load_real_test_data()
        else:
            test_images, test_labels = generate_test_data(num_samples)
        
        st.success(f"üìä Donn√©es de test g√©n√©r√©es: {len(test_images)} √©chantillons")
        
        # === √âvaluation de tous les mod√®les ===
        results = []
        
        # 1. Mod√®le .keras
        if "skin_cancer_model.keras" in available_models:
            model, status = load_keras_model()
            if model is not None:
                result = evaluate_model(model, "Keras (.keras)", test_images, test_labels)
                results.append(result)
                del model  # Lib√©rer la m√©moire
            else:
                results.append({
                    'Mod√®le': 'Keras (.keras)',
                    'Status': f'‚ùå {status}',
                    'Accuracy': 'N/A', 'Accuracy (%)': 'N/A',
                    'Temps total (s)': 'N/A', 'Temps/pred (ms)': 'N/A',
                    'Confiance moy.': 'N/A', 'Nb param√®tres': 'N/A'
                })
        
        # 2. Mod√®le .h5
        if "skin_cancer_model.h5" in available_models:
            model, status = load_h5_model()
            if model is not None:
                result = evaluate_model(model, "H5 (.h5)", test_images, test_labels)
                results.append(result)
                del model
            else:
                results.append({
                    'Mod√®le': 'H5 (.h5)',
                    'Status': f'‚ùå {status}',
                    'Accuracy': 'N/A', 'Accuracy (%)': 'N/A',
                    'Temps total (s)': 'N/A', 'Temps/pred (ms)': 'N/A',
                    'Confiance moy.': 'N/A', 'Nb param√®tres': 'N/A'
                })
        
        # 3. SavedModel Keras
        if "skin_cancer_model_savedmodel" in available_models:
            model, status = load_savedmodel_keras()
            if model is not None:
                result = evaluate_model(model, "SavedModel Keras", test_images, test_labels)
                results.append(result)
                del model
            else:
                results.append({
                    'Mod√®le': 'SavedModel Keras',
                    'Status': f'‚ùå {status}',
                    'Accuracy': 'N/A', 'Accuracy (%)': 'N/A',
                    'Temps total (s)': 'N/A', 'Temps/pred (ms)': 'N/A',
                    'Confiance moy.': 'N/A', 'Nb param√®tres': 'N/A'
                })
            
            # 4. SavedModel Wrapper
            model, status = load_savedmodel_wrapper()
            if model is not None:
                result = evaluate_model(model, "SavedModel Wrapper", test_images, test_labels)
                results.append(result)
                del model
            else:
                results.append({
                    'Mod√®le': 'SavedModel Wrapper',
                    'Status': f'‚ùå {status}',
                    'Accuracy': 'N/A', 'Accuracy (%)': 'N/A',
                    'Temps total (s)': 'N/A', 'Temps/pred (ms)': 'N/A',
                    'Confiance moy.': 'N/A', 'Nb param√®tres': 'N/A'
                })
        
        # === Affichage des r√©sultats ===
        st.subheader("üìä R√©sultats de la comparaison")
        
        if results:
            df = pd.DataFrame(results)
            st.dataframe(df, use_container_width=True)
            
            # === Analyse des r√©sultats ===
            st.subheader("üèÜ Recommandations")
            
            successful_models = [r for r in results if '‚úÖ' in r['Status']]
            
            if successful_models:
                # Trouver le meilleur mod√®le par accuracy
                best_accuracy_model = max(successful_models, 
                                        key=lambda x: float(x['Accuracy']) if x['Accuracy'] != 'N/A' else 0)
                
                # Trouver le mod√®le le plus rapide
                fastest_model = min(successful_models,
                                  key=lambda x: float(x['Temps/pred (ms)']) if x['Temps/pred (ms)'] != 'N/A' else float('inf'))
                
                st.success(f"üéØ **Meilleure pr√©cision**: {best_accuracy_model['Mod√®le']} ({best_accuracy_model['Accuracy (%)']})")
                st.info(f"‚ö° **Plus rapide**: {fastest_model['Mod√®le']} ({fastest_model['Temps/pred (ms)']} ms/pred)")
                
                # Recommandation globale
                st.subheader("üí° Recommandation g√©n√©rale")
                
                if best_accuracy_model['Mod√®le'] == fastest_model['Mod√®le']:
                    st.success(f"üèÜ **Choix optimal**: {best_accuracy_model['Mod√®le']} (meilleur sur tous les crit√®res)")
                else:
                    st.info("‚öñÔ∏è **Compromis √† faire**:")
                    st.write(f"- Pour la **pr√©cision**: {best_accuracy_model['Mod√®le']}")
                    st.write(f"- Pour la **vitesse**: {fastest_model['Mod√®le']}")
                
                # Informations sur Grad-CAM
                st.subheader("üß† Compatibilit√© Grad-CAM")
                for result in successful_models:
                    if "Wrapper" in result['Mod√®le']:
                        st.warning(f"‚ö†Ô∏è {result['Mod√®le']}: Grad-CAM non disponible")
                    else:
                        st.success(f"‚úÖ {result['Mod√®le']}: Grad-CAM disponible")
                
            else:
                st.error("‚ùå Aucun mod√®le n'a pu √™tre √©valu√© avec succ√®s")
                st.info("üí° V√©rifiez vos fichiers de mod√®les ou leurs formats")
        
        else:
            st.error("‚ùå Aucun r√©sultat obtenu")

    # === Informations additionnelles ===
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è √Ä propos des tests")
    st.markdown("""
    **M√©triques √©valu√©es:**
    - **Accuracy**: Pr√©cision sur les donn√©es de test (synth√©tiques)
    - **Temps/pr√©diction**: Vitesse d'inf√©rence en millisecondes
    - **Confiance moyenne**: Confiance moyenne du mod√®le dans ses pr√©dictions
    - **Compatibilit√© Grad-CAM**: Disponibilit√© de la visualisation des zones d'attention
    
    **Note**: Les donn√©es de test sont synth√©tiques. Pour une √©valuation r√©elle, 
    utilisez vos vraies donn√©es de validation.
    """)

if __name__ == "__main__":
    main()